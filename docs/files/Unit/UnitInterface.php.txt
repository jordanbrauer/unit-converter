<?php declare(strict_types = 1);

/**
 * This file is part of the jordanbrauer/unit-converter PHP package.
 *
 * @copyright 2018 Jordan Brauer <jbrauer.inc@gmail.com>
 * @license MIT
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace UnitConverter\Unit;

/**
 * Interface for the unit of measurement abstract class.
 *
 * @version 1.0.0
 * @since 0.0.1
 * @author Jordan Brauer <jbrauer.inc@gmail.com>
 */
interface UnitInterface
{
    /**
     * Sets the units full symantic name.
     *
     * @param string $name The value to be set as the units name
     * @return UnitInterface
     */
    public function setName (string $name): UnitInterface;

    /**
     * Returns the full symantic name of the unit.
     *
     * @return string
     */
    public function getName (): ?string;

    /**
     * Sets the symbol notation used for the unit.
     *
     * @param string $symbol The value to be set as the units symbol
     * @return UnitInterface
     */
    public function setSymbol (string $symbol): UnitInterface;

    /**
     * Returns the symbol notation of the unit.
     *
     * @return string
     */
    public function getSymbol (): ?string;

    /**
     * Sets the unicode scientific symbol notation used for the unit.
     *
     * @param string $scientificSymbol The unicode character to be set as the units scientific symbol
     * @return UnitInterface
     */
    public function setScientificSymbol (string $scientificSymbol): UnitInterface;

    /**
     * Returns the symbol notation of the unit.
     *
     * @return string
     */
    public function getScientificSymbol (): ?string;

    /**
     * Sets the type of measurement that this unit is measuring.
     *
     * @param string $unitOf The value to be set as the units governing unit
     * @return UnitInterface
     */
    public function setUnitOf (string $unitOf): UnitInterface;

    /**
     * Returns the type of measurement that this unit is measuring.
     *
     * @return string
     */
    public function getUnitOf (): ?string;

    /**
     * Sets the unit class that this unit is based off of.
     *
     * @param mixed $base The class that the unit is based on.
     * @return UnitInterface
     *
     * @example $this->setBase(Volume::class);
     */
    public function setBase ($base): UnitInterface;

    /**
     * Returns the unit class that this unit is based off of.
     *
     * @return UnitInterface
     */
    public function getBase (): ?UnitInterface;

    /**
     * Sets the amount of base units required to make up 1 of the unit.
     *
     * @param float $units The amount of units required to make a single base unit
     * @return UnitInterface
     */
    public function setUnits (float $units): UnitInterface;

    /**
     * Returns the amount of base units required to make up 1 of the unit.
     *
     * @return float
     */
    public function getUnits (): ?float;

    /**
     * Returns the units base unit units'.
     *
     * @return float
     */
    public function getBaseUnits (): ?float;
}

